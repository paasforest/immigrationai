'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Download, FileText, Loader } from 'lucide-react';
import jsPDF from 'jspdf';

interface PDFDownloadProps {
  content: string;
  filename: string;
  title?: string;
  className?: string;
}

export default function PDFDownload({ 
  content, 
  filename, 
  title = "Document",
  className = ""
}: PDFDownloadProps) {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);
    
    try {
      // Create new PDF document
      const doc = new jsPDF();
      
      // Set font
      doc.setFont('helvetica');
      
      // Add title
      doc.setFontSize(18);
      doc.setFont('helvetica', 'bold');
      doc.text(title, 20, 30);
      
      // Add line under title
      doc.setLineWidth(0.5);
      doc.line(20, 35, 190, 35);
      
      // Process content and add to PDF
      const lines = content.split('\n');
      let yPosition = 50;
      const pageHeight = 280;
      const margin = 20;
      const maxWidth = 170;
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        
        // Check if we need a new page
        if (yPosition > pageHeight) {
          doc.addPage();
          yPosition = 30;
        }
        
        if (line === '') {
          yPosition += 5; // Empty line spacing
          continue;
        }
        
        // Handle different line types
        if (line.startsWith('[') && line.endsWith(']')) {
          // Placeholder text - make it bold and smaller
          doc.setFont('helvetica', 'bold');
          doc.setFontSize(10);
          doc.text(line, margin, yPosition);
          doc.setFont('helvetica', 'normal');
          doc.setFontSize(12);
        } else if (line.includes('Subject:') || line.includes('Dear') || line.includes('Yours sincerely')) {
          // Headers and closings - make bold
          doc.setFont('helvetica', 'bold');
          doc.text(line, margin, yPosition);
          doc.setFont('helvetica', 'normal');
        } else if (line.includes('Attachments:') || line.includes('Thank you')) {
          // Special sections
          doc.setFont('helvetica', 'bold');
          doc.text(line, margin, yPosition);
          doc.setFont('helvetica', 'normal');
        } else {
          // Regular text - wrap if too long
          const wrappedLines = doc.splitTextToSize(line, maxWidth);
          doc.text(wrappedLines, margin, yPosition);
        }
        
        yPosition += wrappedLines ? wrappedLines.length * 5 : 5;
      }
      
      // Add footer
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setFont('helvetica', 'normal');
        doc.text(`Page ${i} of ${pageCount}`, 20, 290);
        doc.text('Generated by Immigration AI', 150, 290);
      }
      
      // Save the PDF
      doc.save(filename);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button
      onClick={generatePDF}
      disabled={isGenerating}
      className={`bg-red-600 hover:bg-red-700 text-white ${className}`}
    >
      {isGenerating ? (
        <>
          <Loader className="w-4 h-4 mr-2 animate-spin" />
          Generating PDF...
        </>
      ) : (
        <>
          <Download className="w-4 h-4 mr-2" />
          Download PDF
        </>
      )}
    </Button>
  );
}



